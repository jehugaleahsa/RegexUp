namespace RegexUp
{
    public static class UnicodeNamedBlocks
    {
        public static ICharacterCategory IsBasicLatin { get; } = new Literal(@"\p{IsBasicLatin}", true);
        public static ICharacterCategory IsLatin1Supplement { get; } = new Literal(@"\p{IsLatin-1Supplement}", true);
        public static ICharacterCategory IsLatinExtendedA { get; } = new Literal(@"\p{IsLatinExtended-A}", true);
        public static ICharacterCategory IsLatinExtendedB { get; } = new Literal(@"\p{IsLatinExtended-B}", true);
        public static ICharacterCategory IsIPAExtensions { get; } = new Literal(@"\p{IsIPAExtensions}", true);
        public static ICharacterCategory IsSpacingModifierLetters { get; } = new Literal(@"\p{IsSpacingModifierLetters}", true);
        public static ICharacterCategory IsCombiningDiacriticalMarks { get; } = new Literal(@"\p{IsCombiningDiacriticalMarks}", true);
        public static ICharacterCategory IsGreek { get; } = new Literal(@"\p{IsGreek}", true);
        public static ICharacterCategory IsGreekAndCoptic { get; } = new Literal(@"\p{IsGreekandCoptic}", true);
        public static ICharacterCategory IsCyrillic { get; } = new Literal(@"\p{IsCyrillic}", true);
        public static ICharacterCategory IsCyrillicSupplement { get; } = new Literal(@"\p{IsCyrillicSupplement}", true);
        public static ICharacterCategory IsArmenian { get; } = new Literal(@"\p{IsArmenian}", true);
        public static ICharacterCategory IsHebrew { get; } = new Literal(@"\p{IsHebrew}", true);
        public static ICharacterCategory IsArabic { get; } = new Literal(@"\p{IsArabic}", true);
        public static ICharacterCategory IsSyriac { get; } = new Literal(@"\p{IsSyriac}", true);
        public static ICharacterCategory IsThaana { get; } = new Literal(@"\p{IsThaana}", true);
        public static ICharacterCategory IsDevanagari { get; } = new Literal(@"\p{IsDevanagari}", true);
        public static ICharacterCategory IsBengali { get; } = new Literal(@"\p{IsBengali}", true);
        public static ICharacterCategory IsGurmukhi { get; } = new Literal(@"\p{IsGurmukhi}", true);
        public static ICharacterCategory IsGujarati { get; } = new Literal(@"\p{IsGujarati}", true);
        public static ICharacterCategory IsOriya { get; } = new Literal(@"\p{IsOriya}", true);
        public static ICharacterCategory IsTamil { get; } = new Literal(@"\p{IsTamil}", true);
        public static ICharacterCategory IsTelugu { get; } = new Literal(@"\p{IsTelugu}", true);
        public static ICharacterCategory IsKannada { get; } = new Literal(@"\p{IsKannada}", true);
        public static ICharacterCategory IsMalayalam { get; } = new Literal(@"\p{IsMalayalam}", true);
        public static ICharacterCategory IsSinhala { get; } = new Literal(@"\p{IsSinhala}", true);
        public static ICharacterCategory IsThai { get; } = new Literal(@"\p{IsThai}", true);
        public static ICharacterCategory IsLao { get; } = new Literal(@"\p{IsLao}", true);
        public static ICharacterCategory IsTibetan { get; } = new Literal(@"\p{IsTibetan}", true);
        public static ICharacterCategory IsMyanmar { get; } = new Literal(@"\p{IsMyanmar}", true);
        public static ICharacterCategory IsGeorgian { get; } = new Literal(@"\p{IsGeorgian}", true);
        public static ICharacterCategory IsHangulJamo { get; } = new Literal(@"\p{IsHangulJamo}", true);
        public static ICharacterCategory IsEthiopic { get; } = new Literal(@"\p{IsEthiopic}", true);
        public static ICharacterCategory IsCherokee { get; } = new Literal(@"\p{IsCherokee}", true);
        public static ICharacterCategory IsUnifiedCanadianAboriginalSyllabics { get; } = new Literal(@"\p{IsUnifiedCanadianAboriginalSyllabics}", true);
        public static ICharacterCategory IsOgham { get; } = new Literal(@"\p{IsOgham}", true);
        public static ICharacterCategory IsRunic { get; } = new Literal(@"\p{IsRunic}", true);
        public static ICharacterCategory IsTagalog { get; } = new Literal(@"\p{IsTagalog}", true);
        public static ICharacterCategory IsHanunoo { get; } = new Literal(@"\p{IsHanunoo}", true);
        public static ICharacterCategory IsBuhid { get; } = new Literal(@"\p{IsBuhid}", true);
        public static ICharacterCategory IsTagbanwa { get; } = new Literal(@"\p{IsTagbanwa}", true);
        public static ICharacterCategory IsKhmer { get; } = new Literal(@"\p{IsKhmer}", true);
        public static ICharacterCategory IsMongolian { get; } = new Literal(@"\p{IsMongolian}", true);
        public static ICharacterCategory IsLimbu { get; } = new Literal(@"\p{IsLimbu}", true);
        public static ICharacterCategory IsTaiLe { get; } = new Literal(@"\p{IsTaiLe}", true);
        public static ICharacterCategory IsKhmerSymbols { get; } = new Literal(@"\p{IsKhmerSymbols}", true);
        public static ICharacterCategory IsPhoneticExtensions { get; } = new Literal(@"\p{IsPhoneticExtensions}", true);
        public static ICharacterCategory IsLatinExtendedAdditional { get; } = new Literal(@"\p{IsLatinExtendedAdditional}", true);
        public static ICharacterCategory IsGreekExtended { get; } = new Literal(@"\p{IsGreekExtended}", true);
        public static ICharacterCategory IsGeneralPunctuation { get; } = new Literal(@"\p{IsGeneralPunctuation}", true);
        public static ICharacterCategory IsSuperscriptsAndSubscripts { get; } = new Literal(@"\p{IsSuperscriptsandSubscripts}", true);
        public static ICharacterCategory IsCurrencySymbols { get; } = new Literal(@"\p{IsCurrencySymbols}", true);
        public static ICharacterCategory IsCombiningDiacriticalMarksForSymbols { get; } = new Literal(@"\p{IsCombiningDiacriticalMarksforSymbols}", true);
        public static ICharacterCategory IsCombiningMarksForSymbols { get; } = new Literal(@"\p{IsCombiningMarksforSymbols}", true);
        public static ICharacterCategory IsLetterLikeSymbols { get; } = new Literal(@"\p{IsLetterlikeSymbols}", true);
        public static ICharacterCategory IsNumberForms { get; } = new Literal(@"\p{IsNumberForms}", true);
        public static ICharacterCategory IsArrows { get; } = new Literal(@"\p{IsArrows}", true);
        public static ICharacterCategory IsMathematicalOperators { get; } = new Literal(@"\p{IsMathematicalOperators}", true);
        public static ICharacterCategory IsMiscellaneousTechnical { get; } = new Literal(@"\p{IsMiscellaneousTechnical}", true);
        public static ICharacterCategory IsControlPictures { get; } = new Literal(@"\p{IsControlPictures}", true);
        public static ICharacterCategory IsOpticalCharacterRecognition { get; } = new Literal(@"\p{IsOpticalCharacterRecognition}", true);
        public static ICharacterCategory IsEnclosedAlphanumerics { get; } = new Literal(@"\p{IsEnclosedAlphanumerics}", true);
        public static ICharacterCategory IsBoxDrawing { get; } = new Literal(@"\p{IsBoxDrawing}", true);
        public static ICharacterCategory IsBlockElements { get; } = new Literal(@"\p{IsBlockElements}", true);
        public static ICharacterCategory IsGeometricShapes { get; } = new Literal(@"\p{IsGeometricShapes}", true);
        public static ICharacterCategory IsMiscellaneousSymbols { get; } = new Literal(@"\p{IsMiscellaneousSymbols}", true);
        public static ICharacterCategory IsDingbats { get; } = new Literal(@"\p{IsDingbats}", true);
        public static ICharacterCategory IsMiscellaneousMathematicalSymbolsA { get; } = new Literal(@"\p{IsMiscellaneousMathematicalSymbols-A}", true);
        public static ICharacterCategory IsSupplementalArrowsA { get; } = new Literal(@"\p{IsSupplementalArrows-A}", true);
        public static ICharacterCategory IsBraillePatterns { get; } = new Literal(@"\p{IsBraillePatterns}", true);
        public static ICharacterCategory IsSupplementalArrowsB { get; } = new Literal(@"\p{IsSupplementalArrows-B}", true);
        public static ICharacterCategory IsMiscellaneousMathematicalSymbolsB { get; } = new Literal(@"\p{IsMiscellaneousMathematicalSymbols-B}", true);
        public static ICharacterCategory IsSupplementalMathematicalOperators { get; } = new Literal(@"\p{IsSupplementalMathematicalOperators}", true);
        public static ICharacterCategory IsMiscellaneousSymbolsAndArrows { get; } = new Literal(@"\p{IsMiscellaneousSymbolsandArrows}", true);
        public static ICharacterCategory IsCJKRadicalsSupplement { get; } = new Literal(@"\p{IsCJKRadicalsSupplement}", true);
        public static ICharacterCategory IsKangxiRadicals { get; } = new Literal(@"\p{IsKangxiRadicals}", true);
        public static ICharacterCategory IsIdeographicDescriptionCharacters { get; } = new Literal(@"\p{IsIdeographicDescriptionCharacters}", true);
        public static ICharacterCategory IsCJKSymbolsAndPunctuation { get; } = new Literal(@"\p{IsCJKSymbolsandPunctuation}", true);
        public static ICharacterCategory IsHiragana { get; } = new Literal(@"\p{IsHiragana}", true);
        public static ICharacterCategory IsKatakana { get; } = new Literal(@"\p{IsKatakana}", true);
        public static ICharacterCategory IsBopomofo { get; } = new Literal(@"\p{IsBopomofo}", true);
        public static ICharacterCategory IsHangulCompatibilityJamo { get; } = new Literal(@"\p{IsHangulCompatibilityJamo}", true);
        public static ICharacterCategory IsKanbun { get; } = new Literal(@"\p{IsKanbun}", true);
        public static ICharacterCategory IsBopomofoExtended { get; } = new Literal(@"\p{IsBopomofoExtended}", true);
        public static ICharacterCategory IsKatakanaPhoneticExtensions { get; } = new Literal(@"\p{IsKatakanaPhoneticExtensions}", true);
        public static ICharacterCategory IsEnclosedCJKLettersAndMonths { get; } = new Literal(@"\p{IsEnclosedCJKLettersandMonths}", true);
        public static ICharacterCategory IsCJKCompatibility { get; } = new Literal(@"\p{IsCJKCompatibility}", true);
        public static ICharacterCategory IsCJKUnifiedIdeographsExtensionA { get; } = new Literal(@"\p{IsCJKUnifiedIdeographsExtensionA}", true);
        public static ICharacterCategory IsYijingHexagramSymbols { get; } = new Literal(@"\p{IsYijingHexagramSymbols}", true);
        public static ICharacterCategory IsCJKUnifiedIdeographs { get; } = new Literal(@"\p{IsCJKUnifiedIdeographs}", true);
        public static ICharacterCategory IsYiSyllables { get; } = new Literal(@"\p{IsYiSyllables}", true);
        public static ICharacterCategory IsYiRadicals { get; } = new Literal(@"\p{IsYiRadicals}", true);
        public static ICharacterCategory IsHangulSyllables { get; } = new Literal(@"\p{IsHangulSyllables}", true);
        public static ICharacterCategory IsHighSurrogates { get; } = new Literal(@"\p{IsHighSurrogates}", true);
        public static ICharacterCategory IsHighPrivateUseSurrogates { get; } = new Literal(@"\p{IsHighPrivateUseSurrogates}", true);
        public static ICharacterCategory IsLowSurrogates { get; } = new Literal(@"\p{IsLowSurrogates}", true);
        public static ICharacterCategory IsPrivateUse { get; } = new Literal(@"\p{IsPrivateUse}", true);
        public static ICharacterCategory IsPrivateUseArea { get; } = new Literal(@"\p{IsPrivateUseArea}", true);
        public static ICharacterCategory IsCJKCompatibilityIdeographs { get; } = new Literal(@"\p{IsCJKCompatibilityIdeographs}", true);
        public static ICharacterCategory IsAlphabeticPresentationForms { get; } = new Literal(@"\p{IsAlphabeticPresentationForms}", true);
        public static ICharacterCategory IsArabicPresentationFormsA { get; } = new Literal(@"\p{IsArabicPresentationForms-A}", true);
        public static ICharacterCategory IsVariationSelectors { get; } = new Literal(@"\p{IsVariationSelectors}", true);
        public static ICharacterCategory IsCombiningHalfMarks { get; } = new Literal(@"\p{IsCombiningHalfMarks}", true);
        public static ICharacterCategory IsCJKCompatibilityForms { get; } = new Literal(@"\p{IsCJKCompatibilityForms}", true);
        public static ICharacterCategory IsSmallFormVariants { get; } = new Literal(@"\p{IsSmallFormVariants}", true);
        public static ICharacterCategory IsArabicPresentationFormsB { get; } = new Literal(@"\p{IsArabicPresentationForms-B}", true);
        public static ICharacterCategory IsHalfwidthAndFullwidthForms { get; } = new Literal(@"\p{IsHalfwidthandFullwidthForms}", true);
        public static ICharacterCategory IsSpecials { get; } = new Literal(@"\p{IsSpecials}", true);

        public static ICharacterCategory IsNotBasicLatin { get; } = new Literal(@"\P{IsBasicLatin}", true);
        public static ICharacterCategory IsNotLatin1Supplement { get; } = new Literal(@"\P{IsLatin-1Supplement}", true);
        public static ICharacterCategory IsNotLatinExtendedA { get; } = new Literal(@"\P{IsLatinExtended-A}", true);
        public static ICharacterCategory IsNotLatinExtendedB { get; } = new Literal(@"\P{IsLatinExtended-B}", true);
        public static ICharacterCategory IsNotIPAExtensions { get; } = new Literal(@"\P{IsIPAExtensions}", true);
        public static ICharacterCategory IsNotSpacingModifierLetters { get; } = new Literal(@"\P{IsSpacingModifierLetters}", true);
        public static ICharacterCategory IsNotCombiningDiacriticalMarks { get; } = new Literal(@"\P{IsCombiningDiacriticalMarks}", true);
        public static ICharacterCategory IsNotGreek { get; } = new Literal(@"\P{IsGreek}", true);
        public static ICharacterCategory IsNotGreekAndCoptic { get; } = new Literal(@"\P{IsGreekandCoptic}", true);
        public static ICharacterCategory IsNotCyrillic { get; } = new Literal(@"\P{IsCyrillic}", true);
        public static ICharacterCategory IsNotCyrillicSupplement { get; } = new Literal(@"\P{IsCyrillicSupplement}", true);
        public static ICharacterCategory IsNotArmenian { get; } = new Literal(@"\P{IsArmenian}", true);
        public static ICharacterCategory IsNotHebrew { get; } = new Literal(@"\P{IsHebrew}", true);
        public static ICharacterCategory IsNotArabic { get; } = new Literal(@"\P{IsArabic}", true);
        public static ICharacterCategory IsNotSyriac { get; } = new Literal(@"\P{IsSyriac}", true);
        public static ICharacterCategory IsNotThaana { get; } = new Literal(@"\P{IsThaana}", true);
        public static ICharacterCategory IsNotDevanagari { get; } = new Literal(@"\P{IsDevanagari}", true);
        public static ICharacterCategory IsNotBengali { get; } = new Literal(@"\P{IsBengali}", true);
        public static ICharacterCategory IsNotGurmukhi { get; } = new Literal(@"\P{IsGurmukhi}", true);
        public static ICharacterCategory IsNotGujarati { get; } = new Literal(@"\P{IsGujarati}", true);
        public static ICharacterCategory IsNotOriya { get; } = new Literal(@"\P{IsOriya}", true);
        public static ICharacterCategory IsNotTamil { get; } = new Literal(@"\P{IsTamil}", true);
        public static ICharacterCategory IsNotTelugu { get; } = new Literal(@"\P{IsTelugu}", true);
        public static ICharacterCategory IsNotKannada { get; } = new Literal(@"\P{IsKannada}", true);
        public static ICharacterCategory IsNotMalayalam { get; } = new Literal(@"\P{IsMalayalam}", true);
        public static ICharacterCategory IsNotSinhala { get; } = new Literal(@"\P{IsSinhala}", true);
        public static ICharacterCategory IsNotThai { get; } = new Literal(@"\P{IsThai}", true);
        public static ICharacterCategory IsNotLao { get; } = new Literal(@"\P{IsLao}", true);
        public static ICharacterCategory IsNotTibetan { get; } = new Literal(@"\P{IsTibetan}", true);
        public static ICharacterCategory IsNotMyanmar { get; } = new Literal(@"\P{IsMyanmar}", true);
        public static ICharacterCategory IsNotGeorgian { get; } = new Literal(@"\P{IsGeorgian}", true);
        public static ICharacterCategory IsNotHangulJamo { get; } = new Literal(@"\P{IsHangulJamo}", true);
        public static ICharacterCategory IsNotEthiopic { get; } = new Literal(@"\P{IsEthiopic}", true);
        public static ICharacterCategory IsNotCherokee { get; } = new Literal(@"\P{IsCherokee}", true);
        public static ICharacterCategory IsNotUnifiedCanadianAboriginalSyllabics { get; } = new Literal(@"\P{IsUnifiedCanadianAboriginalSyllabics}", true);
        public static ICharacterCategory IsNotOgham { get; } = new Literal(@"\P{IsOgham}", true);
        public static ICharacterCategory IsNotRunic { get; } = new Literal(@"\P{IsRunic}", true);
        public static ICharacterCategory IsNotTagalog { get; } = new Literal(@"\P{IsTagalog}", true);
        public static ICharacterCategory IsNotHanunoo { get; } = new Literal(@"\P{IsHanunoo}", true);
        public static ICharacterCategory IsNotBuhid { get; } = new Literal(@"\P{IsBuhid}", true);
        public static ICharacterCategory IsNotTagbanwa { get; } = new Literal(@"\P{IsTagbanwa}", true);
        public static ICharacterCategory IsNotKhmer { get; } = new Literal(@"\P{IsKhmer}", true);
        public static ICharacterCategory IsNotMongolian { get; } = new Literal(@"\P{IsMongolian}", true);
        public static ICharacterCategory IsNotLimbu { get; } = new Literal(@"\P{IsLimbu}", true);
        public static ICharacterCategory IsNotTaiLe { get; } = new Literal(@"\P{IsTaiLe}", true);
        public static ICharacterCategory IsNotKhmerSymbols { get; } = new Literal(@"\P{IsKhmerSymbols}", true);
        public static ICharacterCategory IsNotPhoneticExtensions { get; } = new Literal(@"\P{IsPhoneticExtensions}", true);
        public static ICharacterCategory IsNotLatinExtendedAdditional { get; } = new Literal(@"\P{IsLatinExtendedAdditional}", true);
        public static ICharacterCategory IsNotGreekExtended { get; } = new Literal(@"\P{IsGreekExtended}", true);
        public static ICharacterCategory IsNotGeneralPunctuation { get; } = new Literal(@"\P{IsGeneralPunctuation}", true);
        public static ICharacterCategory IsNotSuperscriptsAndSubscripts { get; } = new Literal(@"\P{IsSuperscriptsandSubscripts}", true);
        public static ICharacterCategory IsNotCurrencySymbols { get; } = new Literal(@"\P{IsCurrencySymbols}", true);
        public static ICharacterCategory IsNotCombiningDiacriticalMarksForSymbols { get; } = new Literal(@"\P{IsCombiningDiacriticalMarksforSymbols}", true);
        public static ICharacterCategory IsNotCombiningMarksForSymbols { get; } = new Literal(@"\P{IsCombiningMarksforSymbols}", true);
        public static ICharacterCategory IsNotLetterLikeSymbols { get; } = new Literal(@"\P{IsLetterlikeSymbols}", true);
        public static ICharacterCategory IsNotNumberForms { get; } = new Literal(@"\P{IsNumberForms}", true);
        public static ICharacterCategory IsNotArrows { get; } = new Literal(@"\P{IsArrows}", true);
        public static ICharacterCategory IsNotMathematicalOperators { get; } = new Literal(@"\P{IsMathematicalOperators}", true);
        public static ICharacterCategory IsNotMiscellaneousTechnical { get; } = new Literal(@"\P{IsMiscellaneousTechnical}", true);
        public static ICharacterCategory IsNotControlPictures { get; } = new Literal(@"\P{IsControlPictures}", true);
        public static ICharacterCategory IsNotOpticalCharacterRecognition { get; } = new Literal(@"\P{IsOpticalCharacterRecognition}", true);
        public static ICharacterCategory IsNotEnclosedAlphanumerics { get; } = new Literal(@"\P{IsEnclosedAlphanumerics}", true);
        public static ICharacterCategory IsNotBoxDrawing { get; } = new Literal(@"\P{IsBoxDrawing}", true);
        public static ICharacterCategory IsNotBlockElements { get; } = new Literal(@"\P{IsBlockElements}", true);
        public static ICharacterCategory IsNotGeometricShapes { get; } = new Literal(@"\P{IsGeometricShapes}", true);
        public static ICharacterCategory IsNotMiscellaneousSymbols { get; } = new Literal(@"\P{IsMiscellaneousSymbols}", true);
        public static ICharacterCategory IsNotDingbats { get; } = new Literal(@"\P{IsDingbats}", true);
        public static ICharacterCategory IsNotMiscellaneousMathematicalSymbolsA { get; } = new Literal(@"\P{IsMiscellaneousMathematicalSymbols-A}", true);
        public static ICharacterCategory IsNotSupplementalArrowsA { get; } = new Literal(@"\P{IsSupplementalArrows-A}", true);
        public static ICharacterCategory IsNotBraillePatterns { get; } = new Literal(@"\P{IsBraillePatterns}", true);
        public static ICharacterCategory IsNotSupplementalArrowsB { get; } = new Literal(@"\P{IsSupplementalArrows-B}", true);
        public static ICharacterCategory IsNotMiscellaneousMathematicalSymbolsB { get; } = new Literal(@"\P{IsMiscellaneousMathematicalSymbols-B}", true);
        public static ICharacterCategory IsNotSupplementalMathematicalOperators { get; } = new Literal(@"\P{IsSupplementalMathematicalOperators}", true);
        public static ICharacterCategory IsNotMiscellaneousSymbolsAndArrows { get; } = new Literal(@"\P{IsMiscellaneousSymbolsandArrows}", true);
        public static ICharacterCategory IsNotCJKRadicalsSupplement { get; } = new Literal(@"\P{IsCJKRadicalsSupplement}", true);
        public static ICharacterCategory IsNotKangxiRadicals { get; } = new Literal(@"\P{IsKangxiRadicals}", true);
        public static ICharacterCategory IsNotIdeographicDescriptionCharacters { get; } = new Literal(@"\P{IsIdeographicDescriptionCharacters}", true);
        public static ICharacterCategory IsNotCJKSymbolsAndPunctuation { get; } = new Literal(@"\P{IsCJKSymbolsandPunctuation}", true);
        public static ICharacterCategory IsNotHiragana { get; } = new Literal(@"\P{IsHiragana}", true);
        public static ICharacterCategory IsNotKatakana { get; } = new Literal(@"\P{IsKatakana}", true);
        public static ICharacterCategory IsNotBopomofo { get; } = new Literal(@"\P{IsBopomofo}", true);
        public static ICharacterCategory IsNotHangulCompatibilityJamo { get; } = new Literal(@"\P{IsHangulCompatibilityJamo}", true);
        public static ICharacterCategory IsNotKanbun { get; } = new Literal(@"\P{IsKanbun}", true);
        public static ICharacterCategory IsNotBopomofoExtended { get; } = new Literal(@"\P{IsBopomofoExtended}", true);
        public static ICharacterCategory IsNotKatakanaPhoneticExtensions { get; } = new Literal(@"\P{IsKatakanaPhoneticExtensions}", true);
        public static ICharacterCategory IsNotEnclosedCJKLettersAndMonths { get; } = new Literal(@"\P{IsEnclosedCJKLettersandMonths}", true);
        public static ICharacterCategory IsNotCJKCompatibility { get; } = new Literal(@"\P{IsCJKCompatibility}", true);
        public static ICharacterCategory IsNotCJKUnifiedIdeographsExtensionA { get; } = new Literal(@"\P{IsCJKUnifiedIdeographsExtensionA}", true);
        public static ICharacterCategory IsNotYijingHexagramSymbols { get; } = new Literal(@"\P{IsYijingHexagramSymbols}", true);
        public static ICharacterCategory IsNotCJKUnifiedIdeographs { get; } = new Literal(@"\P{IsCJKUnifiedIdeographs}", true);
        public static ICharacterCategory IsNotYiSyllables { get; } = new Literal(@"\P{IsYiSyllables}", true);
        public static ICharacterCategory IsNotYiRadicals { get; } = new Literal(@"\P{IsYiRadicals}", true);
        public static ICharacterCategory IsNotHangulSyllables { get; } = new Literal(@"\P{IsHangulSyllables}", true);
        public static ICharacterCategory IsNotHighSurrogates { get; } = new Literal(@"\P{IsHighSurrogates}", true);
        public static ICharacterCategory IsNotHighPrivateUseSurrogates { get; } = new Literal(@"\P{IsHighPrivateUseSurrogates}", true);
        public static ICharacterCategory IsNotLowSurrogates { get; } = new Literal(@"\P{IsLowSurrogates}", true);
        public static ICharacterCategory IsNotPrivateUse { get; } = new Literal(@"\P{IsPrivateUse}", true);
        public static ICharacterCategory IsNotPrivateUseArea { get; } = new Literal(@"\P{IsPrivateUseArea}", true);
        public static ICharacterCategory IsNotCJKCompatibilityIdeographs { get; } = new Literal(@"\P{IsCJKCompatibilityIdeographs}", true);
        public static ICharacterCategory IsNotAlphabeticPresentationForms { get; } = new Literal(@"\P{IsAlphabeticPresentationForms}", true);
        public static ICharacterCategory IsNotArabicPresentationFormsA { get; } = new Literal(@"\P{IsArabicPresentationForms-A}", true);
        public static ICharacterCategory IsNotVariationSelectors { get; } = new Literal(@"\P{IsVariationSelectors}", true);
        public static ICharacterCategory IsNotCombiningHalfMarks { get; } = new Literal(@"\P{IsCombiningHalfMarks}", true);
        public static ICharacterCategory IsNotCJKCompatibilityForms { get; } = new Literal(@"\P{IsCJKCompatibilityForms}", true);
        public static ICharacterCategory IsNotSmallFormVariants { get; } = new Literal(@"\P{IsSmallFormVariants}", true);
        public static ICharacterCategory IsNotArabicPresentationFormsB { get; } = new Literal(@"\P{IsArabicPresentationForms-B}", true);
        public static ICharacterCategory IsNotHalfwidthAndFullwidthForms { get; } = new Literal(@"\P{IsHalfwidthandFullwidthForms}", true);
        public static ICharacterCategory IsNotSpecials { get; } = new Literal(@"\P{IsSpecials}", true);
    }
}
